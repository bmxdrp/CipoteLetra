---
import { Markdown } from '@astropub/md';
import BlogPost from '@/layouts/BlogPost.astro';
import { client } from '@/lib/tursoDb';
import type { Blog } from '@/lib/types';
const { slug } = Astro.params;
let post: Blog | null = null;
if(!slug){
  return new Response(null, {
    status: 404,
    statusText: 'Not found'
  });
}
try {
  const postResponse = await client.execute({
    sql: "select posts.content, posts.published, posts.title, posts.yt_id, posts.category, posts.slug, posts.img, posts.tags, posts.created_at, authors.username, authors.slug, authors.avatar, authors.twitter from posts left join authors on authors.id = posts.author_id where posts.slug = ? and posts.published = 1;",
    args: [slug as string],
  });
  if(!postResponse.rows.length){
    return new Response(null, {
      status: 404,
      statusText: 'Not found'
    });
  }
  const blogPostData = postResponse.rows[0] as any;
  if(!blogPostData){
    return new Response(null, {
      status: 404,
      statusText: 'Not found'
    });
  }
  post = {
    content: blogPostData.content,
    published: blogPostData.published,
    title: blogPostData.title,
    yt_id: blogPostData.yt_id,
    category: blogPostData.category,
    slug: blogPostData.slug,
    img: blogPostData.img,
    tags: blogPostData.tags,
    created_at: blogPostData.created_at,
    author: {
      username: blogPostData.username,
      slug: blogPostData.slug,
      avatar: blogPostData.avatar,
      email: blogPostData.email,
      socials: {
        twitter: blogPostData.twitter
      },
      created_at: blogPostData.created_at
    }
  };
} catch (error) {
  // TODO: Handle error and notify user
}
---

<BlogPost {...post}>
  <Markdown of={post?.content || ""} />
</BlogPost>